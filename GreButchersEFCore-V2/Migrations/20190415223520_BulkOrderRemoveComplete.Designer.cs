// <auto-generated />
using System;
using GreButchersEFCore_V2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GreButchersEFCore_V2.Migrations
{
    [DbContext(typeof(GreButchersContext))]
    [Migration("20190415223520_BulkOrderRemoveComplete")]
    partial class BulkOrderRemoveComplete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GreButchersEFCore_V2.Models.BulkOrder", b =>
                {
                    b.Property<int>("BulkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BulkOrder_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BulkOrderCompletionDate")
                        .HasColumnName("BulkOrder_CompletionDate")
                        .HasMaxLength(50);

                    b.Property<string>("BulkOrderCreationDate")
                        .HasColumnName("BulkOrder_CreationDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("BulkOrderMargin")
                        .HasColumnName("BulkOrder_Margin")
                        .IsUnicode(false);

                    b.Property<decimal?>("BulkOrderProfit")
                        .HasColumnName("BulkOrder_Profit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BulkOrderStatus")
                        .HasColumnName("BulkOrder_Status");

                    b.Property<int?>("FkCustomerId")
                        .HasColumnName("FK_Customer_Id");

                    b.HasKey("BulkOrderId");

                    b.HasIndex("FkCustomerId");

                    b.ToTable("BulkOrder");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.BulkOrderItem", b =>
                {
                    b.Property<int>("BulkOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BulkOrderItem_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BulkOrderItemQuantity")
                        .HasColumnName("BulkOrderItem_Quantity");

                    b.Property<int?>("FkBulkOrderId")
                        .HasColumnName("FK_BulkOrder_Id");

                    b.Property<int>("FkProductId")
                        .HasColumnName("FK_Product_Id");

                    b.HasKey("BulkOrderItemId");

                    b.HasIndex("FkBulkOrderId");

                    b.HasIndex("FkProductId");

                    b.ToTable("BulkOrderItem");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Category_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnName("Category_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Customer_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("CustomerCompanyName")
                        .HasColumnName("Customer_CompanyName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("CustomerId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Employee_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("EmployeeEndDate")
                        .HasColumnName("Employee_EndDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("EmployeeStartDate")
                        .HasColumnName("Employee_StartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmployeeType")
                        .HasColumnName("Employee_Type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("EmployeeId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.InShopSales", b =>
                {
                    b.Property<int>("InShopSalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InShopSales_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnName("FK_Employee_Id");

                    b.Property<int?>("FkProductId")
                        .HasColumnName("FK_Product_Id");

                    b.Property<string>("InShopSalesDate")
                        .IsRequired()
                        .HasColumnName("InShopSales_Date")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("InShopSalesQuantity")
                        .HasColumnName("InShopSales_Quantity");

                    b.Property<decimal?>("InShopSalesTotal")
                        .HasColumnName("InShopSales_Total")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("InShopSalesId");

                    b.HasIndex("FkEmployeeId");

                    b.HasIndex("FkProductId");

                    b.ToTable("InShopSales");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.ModifiedBy", b =>
                {
                    b.Property<int>("ModifiedById")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedBy_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FkBulkOrderId")
                        .HasColumnName("FK_BulkOrder_Id");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnName("FK_Employee_Id");

                    b.Property<string>("ModifiedByDate")
                        .HasColumnName("ModifiedBy_Date")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("ModifiedByFirst")
                        .HasColumnName("ModifiedBy_First");

                    b.HasKey("ModifiedById");

                    b.HasIndex("FkBulkOrderId");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("ModifiedBy");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Product_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkCategoryId")
                        .HasColumnName("FK_Category_Id");

                    b.Property<string>("ProductDescription")
                        .HasColumnName("Product_Description")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("ProductImage")
                        .HasColumnName("Product_Image");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("Product_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("ProductPrice")
                        .HasColumnName("Product_Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ProductWeight")
                        .HasColumnName("Product_Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ProductId");

                    b.HasIndex("FkCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Stock_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkProductId")
                        .HasColumnName("FK_Product_Id");

                    b.Property<int?>("StockShop")
                        .HasColumnName("Stock_Shop");

                    b.Property<int?>("StockWarehouse")
                        .HasColumnName("Stock_Warehouse");

                    b.HasKey("StockId");

                    b.HasIndex("FkProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Supplier_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SupplierCompany")
                        .HasColumnName("Supplier_Company")
                        .HasMaxLength(40);

                    b.Property<string>("SupplierEmail")
                        .HasColumnName("Supplier_Email")
                        .HasMaxLength(100);

                    b.Property<string>("SupplierName")
                        .HasColumnName("Supplier_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierNumber")
                        .HasColumnName("Supplier_ContactNumber")
                        .HasMaxLength(20);

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.SupplierContacted", b =>
                {
                    b.Property<int>("SupplierContactedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierContacted_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FkBulkOrderId")
                        .HasColumnName("FK_BulkOrder_Id");

                    b.Property<int>("FkSupplerId")
                        .HasColumnName("FK_Suppler_Id");

                    b.Property<string>("SupplerContactedReplyDate")
                        .HasColumnName("SupplerContacted_ReplyDate")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SupplierContactedDate")
                        .HasColumnName("SupplierContacted_Date")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool>("SupplierContactedDisplayToUser")
                        .HasColumnName("SupplierContacted_DisplayToUser");

                    b.Property<decimal?>("SupplierContactedQuote")
                        .HasColumnName("SupplierContacted_Quote")
                        .HasColumnType("decimal(18, 2)")
                        .IsUnicode(false);

                    b.Property<bool>("SupplierContactedReply")
                        .HasColumnName("SupplierContacted_Reply");

                    b.Property<bool>("SupplierContactedUserSelected")
                        .HasColumnName("SupplierContacted_UserSelected");

                    b.HasKey("SupplierContactedId");

                    b.HasIndex("FkBulkOrderId");

                    b.HasIndex("FkSupplerId");

                    b.ToTable("SupplierContacted");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("BuildingName");

                    b.Property<string>("City");

                    b.Property<DateTime>("DOB");

                    b.Property<string>("FirstName");

                    b.Property<string>("PostCode");

                    b.Property<string>("StreetAddress1");

                    b.Property<string>("StreetAddress2");

                    b.Property<string>("Surname");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.BulkOrder", b =>
                {
                    b.HasOne("GreButchersEFCore_V2.Models.Customer", "FkCustomer")
                        .WithMany("BulkOrder")
                        .HasForeignKey("FkCustomerId")
                        .HasConstraintName("FK_BulkOrder_Customer")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.BulkOrderItem", b =>
                {
                    b.HasOne("GreButchersEFCore_V2.Models.BulkOrder", "FkBulkOrder")
                        .WithMany("BulkOrderItem")
                        .HasForeignKey("FkBulkOrderId")
                        .HasConstraintName("FK_BulkOrderItem_BulkOrder")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GreButchersEFCore_V2.Models.Product", "FkProduct")
                        .WithMany("BulkOrderItem")
                        .HasForeignKey("FkProductId")
                        .HasConstraintName("FK_BulkOrderItem_Product")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Customer", b =>
                {
                    b.HasOne("GreButchersEFCore_V2.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("GreButchersEFCore_V2.Models.Customer", "ApplicationUserId");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Employee", b =>
                {
                    b.HasOne("GreButchersEFCore_V2.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Employee")
                        .HasForeignKey("GreButchersEFCore_V2.Models.Employee", "ApplicationUserId");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.InShopSales", b =>
                {
                    b.HasOne("GreButchersEFCore_V2.Models.Employee", "FkEmployee")
                        .WithMany("InShopSales")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_InShopSales_Employee");

                    b.HasOne("GreButchersEFCore_V2.Models.Product", "FkProduct")
                        .WithMany("InShopSales")
                        .HasForeignKey("FkProductId")
                        .HasConstraintName("FK_InShopSales_Product");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.ModifiedBy", b =>
                {
                    b.HasOne("GreButchersEFCore_V2.Models.BulkOrder", "FkBulkOrder")
                        .WithMany("ModifiedBy")
                        .HasForeignKey("FkBulkOrderId")
                        .HasConstraintName("FK_ModifiedBy_BulkOrder");

                    b.HasOne("GreButchersEFCore_V2.Models.Employee", "FkEmployee")
                        .WithMany("ModifiedBy")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_ModifiedBy_Employee");
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Product", b =>
                {
                    b.HasOne("GreButchersEFCore_V2.Models.Category", "FkCategory")
                        .WithMany("Product")
                        .HasForeignKey("FkCategoryId")
                        .HasConstraintName("FK_Product_Category")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.Stock", b =>
                {
                    b.HasOne("GreButchersEFCore_V2.Models.Product", "FkProduct")
                        .WithMany("Stock")
                        .HasForeignKey("FkProductId")
                        .HasConstraintName("FK_Stock_Product")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GreButchersEFCore_V2.Models.SupplierContacted", b =>
                {
                    b.HasOne("GreButchersEFCore_V2.Models.BulkOrder", "FkBulkOrder")
                        .WithMany("SupplierContacted")
                        .HasForeignKey("FkBulkOrderId")
                        .HasConstraintName("FK_SupplierContacted_BulkOrder");

                    b.HasOne("GreButchersEFCore_V2.Models.Supplier", "FkSuppler")
                        .WithMany("SupplierContacted")
                        .HasForeignKey("FkSupplerId")
                        .HasConstraintName("FK_SupplierContacted_Supplier")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
